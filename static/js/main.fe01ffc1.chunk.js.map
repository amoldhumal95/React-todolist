{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","newItem","list","key","value","this","setState","id","Math","random","slice","push","updatedList","filter","item","class","charset","color","type","placeholder","onChange","e","updateInput","target","onClick","addItem","map","deleteItem","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uNA0FeA,G,wDArFb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAEDC,MAAM,CACTC,QAAQ,GACRC,KAAK,IALS,E,wDASNC,EAAKC,GACfC,KAAKC,SAAL,eACGH,EAAMC,M,gCAOT,IAAMH,EAAQ,CACZM,GAAI,EAAIC,KAAKC,SACbL,MAAOC,KAAKL,MAAMC,QAAQS,SAItBR,EAAI,YAAOG,KAAKL,MAAME,MAG5BA,EAAKS,KAAKV,GAGVI,KAAKC,SAAS,CACZJ,OACAD,QAAQ,O,iCAIDM,GAET,IAEOK,EAFG,YAAOP,KAAKL,MAAME,MAEFW,QAAO,SAAAC,GAAI,OAAIA,EAAKP,KAAOA,KAEpDF,KAAKC,SAAS,CAACJ,KAAKU,M,+BAGd,IAAD,OACR,OAEI,yBAAKG,MAAM,UACT,8BACA,0BAAMC,QAAQ,WAEd,0BAAMC,MAAM,WAAZ,cAGA,6BACA,0BAAMA,MAAM,WAAZ,kBAGA,6BACA,6BACA,2BAAOC,KAAK,OACZC,YAAY,oBACZf,MAAOC,KAAKL,MAAMC,QAClBmB,SAAU,SAAAC,GAAC,OAAI,EAAKC,YAAY,UAAWD,EAAEE,OAAOnB,UAEpD,4BAAQoB,QAAS,kBAAM,EAAKC,YAA5B,OACA,6BACA,4BACGpB,KAAKL,MAAME,KAAKwB,KAAI,SAAAZ,GACnB,OACE,wBAAIX,IAAKW,EAAKP,IACXO,EAAKV,MACN,4BAAQoB,QAAS,kBAAM,EAAKG,WAAWb,EAAKP,MAA5C,e,GA1EEqB,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.fe01ffc1.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { render } from 'react-dom';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n\n    this.state={\n      newItem:\"\",\n      list:[]\n    }\n  }\n\n  updateInput(key, value){\n    this.setState({\n      [key] :value\n    });\n  }\n\n\n  addItem(){\n    //create item with unique id\n    const newItem={\n      id: 1 + Math.random(),\n      value: this.state.newItem.slice()\n    };\n\n    //copy of current list of items\n    const list = [...this.state.list];\n\n    //add new item to list\n    list.push(newItem);\n\n    //update state with new list and reset newItem input\n    this.setState({\n      list,\n      newItem:\"\"\n    });\n  }\n\n  deleteItem(id){\n    //copy current list of items\n    const list = [...this.state.list];\n     //filter out item being deleted\n     const updatedList = list.filter(item => item.id !== id);\n\n     this.setState({list:updatedList});\n  }\n\n  render(){\n  return (\n    \n      <div class=\"border\">\n        <head>\n        <meta charset=\"UTF-8\"></meta>\n        </head>\n        <font color=\"#a0a0a0\">\n          To-Do List\n        </font>\n        <br />\n        <font color=\"#d0d0d0\">\n        Add an item...\n        </font>\n        <br />\n        <br/>\n        <input type=\"text\" \n        placeholder=\"Type item here...\"\n        value={this.state.newItem}\n        onChange={e => this.updateInput(\"newItem\", e.target.value)}\n        />\n        <button onClick={() => this.addItem()} >Add</button>\n        <br />\n        <ul>\n          {this.state.list.map(item =>{\n            return(\n              <li key={item.id}>\n                {item.value}\n                <button onClick={() => this.deleteItem(item.id)}>\n                  x\n                </button>\n              </li>\n            )\n          })}\n        </ul>\n      </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}